{"version":3,"sources":["components/office/Office.styles.js","components/office/index.js","components/weatherwidget/WeatherWidget.styles.js","components/weatherwidget/index.js","GlobalStyles.js","App.styles.js","App.js","index.js"],"names":["Wrapper","styled","div","CityHeader","TextDisplay","ImageDisplay","getAPIWeather","location","a","endPoint","fetch","json","Office","useState","city","setCity","icon","setIcon","temperature","setTemperature","description","setDescription","fetchWeather","weatherData","console","log","useEffect","src","alt","WeatherHeader","WeatherText","OfficeDisplay","propTypes","locations","PropTypes","arrayOf","string","WeatherWidget","map","i","GlobalStyle","createGlobalStyle","cities","App","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6NAEaA,EAAUC,IAAOC,IAAV,wHAOPC,EAAaF,IAAOC,IAAV,uDAKVE,EAAcH,IAAOC,IAAV,gCAKXG,EAAeJ,IAAOC,IAAV,2G,OCRnBI,EAAa,uCAAG,WAAOC,GAAP,eAAAC,EAAA,6DACZC,EADY,UAHN,oDAGM,YACaF,GADb,SAEEG,MAAMD,GAFR,8BAEmBE,OAFnB,mFAAH,sDAoDJC,EAxCA,SAAC,GAAgB,IAAfL,EAAc,EAAdA,SACb,EAAwBM,mBARR,gBAQhB,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAwBF,mBARR,OAQhB,mBAAOG,EAAP,KAAaC,EAAb,KACA,EAAsCJ,mBARf,GAQvB,mBAAOK,EAAP,KAAoBC,EAApB,KACA,EAAsCN,mBARf,uBAQvB,mBAAOO,EAAP,KAAoBC,EAApB,KAEMC,EAAY,uCAAG,WAAMf,GAAN,eAAAC,EAAA,+EAEaF,EAAcC,GAF3B,OAEPgB,EAFO,OAGbR,EAAQQ,EAAYT,MACpBG,EAAQM,EAAYP,MACpBG,EAAeI,EAAYL,aAC3BG,EAAeE,EAAYH,aANd,kDASbI,QAAQC,IAAR,MACAV,EAAQR,GACRU,EAAQ,OACRE,GAAgB,KAChBE,EAAe,yBAbF,0DAAH,sDAqBlB,OAJAK,qBAAU,WACNJ,EAAaf,KACd,IAGC,eAACP,EAAD,WACI,cAACG,EAAD,UAAaW,IACb,cAACT,EAAD,UACI,qBAAKsB,IAAG,2CAAsCX,EAAtC,WAAqDY,IAAG,UAAKR,EAAL,YAEpE,cAAChB,EAAD,4BAAyBc,GAAzB,OAnCS,OAmCT,QACA,cAACd,EAAD,UAAcgB,Q,iBCvDbpB,EAAUC,IAAOC,IAAV,iOAWP2B,EAAgB5B,IAAOC,IAAV,6JAUb4B,EAAc7B,IAAOC,IAAV,8FAMX6B,EAAgB9B,IAAOC,IAAV,oICL1B2B,EAAcG,UAAY,CACtBC,UAAWC,IAAUC,QAAQD,IAAUE,SAG5BC,I,IAAAA,EAtBO,SAAC,GAAiB,IAAhBJ,EAAe,EAAfA,UACpB,OACI,eAAC,EAAD,WACI,cAACJ,EAAD,UACI,cAACC,EAAD,gCAEJ,cAACC,EAAD,UACME,EAAUK,KAAI,SAAC/B,EAAUgC,GACvB,OAAO,cAAC,EAAD,CAAgBhC,SAAUA,GAAbgC,YCZ3BC,EAAcC,YAAH,kUCAXzC,EAAUC,IAAOC,IAAV,oJCMdwC,EAAS,CAAC,UAAW,YAAa,cAczBC,MAVf,WACE,OACE,eAAC,EAAD,CAASC,UAAU,MAAnB,UACI,cAAC,EAAD,CAAeX,UAAWS,IAC1B,cAACF,EAAD,QCZRK,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.fbc980bf.chunk.js","sourcesContent":["import styled from 'styled-components'\r\n\r\nexport const Wrapper = styled.div`\r\n    padding: 10px;\r\n    min-width: 100px;\r\n    font-size: 0.85rem;\r\n    line-height: 18px;\r\n`\r\n\r\nexport const CityHeader = styled.div`\r\n    text-align: center;\r\n\r\n`\r\n\r\nexport const TextDisplay = styled.div`\r\n\r\n\r\n`\r\n\r\nexport const ImageDisplay = styled.div`\r\n    display: flex; \r\n    align-items: center;\r\n    justify-content: center;\r\n\r\n`\r\n","import React, { useState, useEffect } from 'react'\r\nimport {Wrapper, CityHeader, TextDisplay, ImageDisplay} from './Office.styles'\r\n\r\n\r\n// The base URL used when the app is running in \r\n// const devURL = 'http://localhost:8080/api/weather'\r\n\r\n//The base URL used when the app is running in heroku.\r\nconst baseURL = 'https://midland-weather.herokuapp.com/api/weather'\r\n\r\n\r\nconst getAPIWeather = async (location) => {\r\n    const endPoint = `${baseURL}/${location}`\r\n    return await (await fetch(endPoint)).json();\r\n}\r\n\r\nconst defaultCity = 'Default City'\r\nconst defaultIcon = '01d'\r\nconst defaultTemperature = 0\r\nconst defaultDescription = 'Default Description'\r\n\r\nconst degreeSymbol = '\\u00B0'\r\n\r\nconst Office = ({location}) => {\r\n    const [city, setCity] = useState (defaultCity)\r\n    const [icon, setIcon] = useState (defaultIcon)\r\n    const [temperature, setTemperature] = useState (defaultTemperature)\r\n    const [description, setDescription] = useState (defaultDescription)\r\n    \r\n    const fetchWeather = async(location) => {\r\n        try {\r\n            const weatherData = await getAPIWeather(location)\r\n            setCity(weatherData.city)\r\n            setIcon(weatherData.icon)\r\n            setTemperature(weatherData.temperature)\r\n            setDescription(weatherData.description)\r\n        }\r\n        catch(error) {\r\n            console.log(error)\r\n            setCity(location)\r\n            setIcon('01d')\r\n            setTemperature(-500)\r\n            setDescription('Error retrieving data')\r\n        }\r\n    }\r\n\r\n    useEffect(()=> {\r\n        fetchWeather(location)\r\n    }, [])\r\n\r\n    return (\r\n        <Wrapper>\r\n            <CityHeader>{city}</CityHeader>\r\n            <ImageDisplay>\r\n                <img src={`http://openweathermap.org/img/wn/${icon}@2x.png`} alt={`${description}.png`}></img>\r\n            </ImageDisplay>\r\n            <TextDisplay>{`Current ${temperature}${degreeSymbol} F`}</TextDisplay>\r\n            <TextDisplay>{description}</TextDisplay>\r\n        </Wrapper>\r\n    )\r\n}\r\n\r\n\r\nexport default Office","import styled from 'styled-components'\r\n\r\nexport const Wrapper = styled.div`\r\n    display: inline-block\r\n    background: green;\r\n    max-width: 1280px;\r\n    min-width: 480px;\r\n    margin: 20px 0px;\r\n    padding 20px;\r\n    border: 2px solid #F1F1F1;\r\n    border-radius: 4px;\r\n`\r\n\r\nexport const WeatherHeader = styled.div`\r\n\r\n    display: flex;\r\n    height: 32px;\r\n    width: 100%;\r\n    border-radius: 4px;\r\n    background: #F1F1F1;\r\n    opacity: 0.9;\r\n`\r\n\r\nexport const WeatherText = styled.div`\r\n    margin: auto;\r\n    font-size: 0.9rem;\r\n    font-weight: 400;\r\n`\r\n\r\nexport const OfficeDisplay = styled.div`   \r\n    display: flex; \r\n    align-items: center;\r\n    justify-content: center;\r\n    flex-wrap: wrap;\r\n\r\n`","import React from 'react'\r\nimport Office from '../office'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport {Wrapper, OfficeDisplay, WeatherHeader, WeatherText} from './WeatherWidget.styles'\r\n\r\nconst WeatherWidget = ({locations}) => {\r\n    return (\r\n        <Wrapper>\r\n            <WeatherHeader>\r\n                <WeatherText>MIDLAND WEATHER</WeatherText>\r\n            </WeatherHeader>\r\n            <OfficeDisplay>\r\n                { locations.map((location, i) => {\r\n                    return(<Office key={i} location={location}/>)})\r\n                }\r\n            </OfficeDisplay>\r\n\r\n        </Wrapper>\r\n    )\r\n        \r\n    \r\n}\r\n\r\nWeatherHeader.propTypes = {\r\n    locations: PropTypes.arrayOf(PropTypes.string)\r\n}\r\n\r\nexport default WeatherWidget","import {createGlobalStyle} from 'styled-components'\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n\r\n    :root {\r\n        --maxWidth: 1280px;\r\n    }\r\n    \r\n    * {\r\n        box-sizing: content-box;\r\n        font-family: 'Helvetica', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;\r\n        padding: 0px;\r\n        margin: 0px 0px;\r\n    } \r\n\r\n`","import styled from 'styled-components'\r\n\r\nexport const Wrapper = styled.div`\r\n    display: flex; \r\n    align-items: center;\r\n    justify-content: center;\r\n    width: 100%;\r\n    min-width: 480px;\r\n\r\n`","// import './App.css';\nimport WeatherWidget from './components/weatherwidget'\nimport { GlobalStyle } from './GlobalStyles'\nimport {Wrapper} from './App.styles'\n\n// Each city in the cities array is sent to the backend to retrieve weather data about that city.\n// Only Chicago, FortMyers, and SiouxFalls are currently mapped to anything in the backend so those are currently the\n// only cities that will return data.\nconst cities = ['Chicago', 'FortMyers', 'SiouxFalls']\n\n\n\nfunction App() {\n  return (\n    <Wrapper className=\"App\">\n        <WeatherWidget locations={cities}/>\n        <GlobalStyle/>\n    </Wrapper>\n\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}